{"version":3,"sources":["hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","size","style","height","CakeWalletBalance","cakeBalance","useTokenBalance","tokenAddress","setBalance","ethereum","getTokenBalance","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","Img","mediaQueries","sm","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","eggPrice","usePriceCakeBusd","toNumber","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","display","flexDirection","justifyContent","mb","src","alt","width","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","lg","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","getContract","cakeABI","methods","call","supply","fetchTotalSupply","useTotalSupply","burnedBalance","balanceOf","bal","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","eggPerBlock","position","right","bottom","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","color","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","chrome","Hero","Cards","BaseLayout","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/13.b98eecc9.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingIBG',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Button, Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Button size=\"sm\" style={{height:\"2rem\"}}>\n        {TranslateString(298, 'Locked')}\n      </Button>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text , Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Button size=\"sm\" style={{height:\"2rem\"}}>\n        {TranslateString(298, 'Locked')}\n      </Button>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingIBG',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button , Text} from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  height: 25.5rem;\n  border-radius: 8px;\n`\n\nconst Block = styled.div`\n  //margin-bottom: 16px;\n  display: flex; \n  justify-content: space-between;\n  min-width: 18rem;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 1rem;\n  font-weight: 700;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n // background: grey;\n`\n// const Whole = styled(Card)`\n//   // height: 270px;\n//   // background: #FFFFFF`;\n\nconst Img = styled.div`\n${({ theme }) => theme.mediaQueries.sm}{\n  display: block;\n}\ndisplay:none;`;\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody style={{display:\"flex\",flexDirection:\"column\",height:\"100%\",justifyContent:\"space-evenly\"}}>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <div style={{display:\"flex\",justifyContent:\"space-between\"}}>\n        <Img><CardImage src=\"/images/IBG.png\" alt=\"iBG logo\" width={104} height={64} /> </Img>\n        <div style={{height:\"7rem\",display:\"flex\",flexDirection:\"column\",justifyContent:\"space-between\"}}>\n        <Block>\n          <div>\n          <Text>{TranslateString(544, 'IBG to Harvest')}</Text>\n          <Label>${(eggPrice * earningsSum).toFixed(2)}</Label>\n          </div>\n          <CakeHarvestBalance  earningsSum={earningsSum}/>\n        </Block>\n        <Block>\n          <div>\n          <Text>{TranslateString(546, 'IBG in Wallet')}</Text>\n          <Label>${(eggPrice * cakeBalance).toFixed(2)}</Label>\n          </div>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n        </Block>\n        </div>\n        </div>\n        <Actions>                    { /* style={{ background: \"linear-gradient(180deg, #00ECEC 0%, #6E318E 77.6%, #6E318E 100%)\" }}   */ }\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n              \n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting EGG')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n      )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 8px;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\nconst Img = styled.div`\n${({ theme }) => theme.mediaQueries.lg}{\n  display: block;\n}\n display: none;\n`;\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  let eggPerBlock = 0;\n  if(farms && farms[0] && farms[0].eggPerBlock){\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(534, 'IBG Stats')}\n        </Heading>\n        <div style={{width:\"18rem\"}}>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New EGG/block')}</Text>\n          <Text bold fontSize=\"14px\">{eggPerBlock}</Text>\n        </Row>\n        </div>\n      </CardBody>\n      <Img><img src=\"/images/hexa.png\"  alt=\"hexa\" style={{width:\"5rem\",position:\"absolute\",right:\"1rem\",bottom:\"1rem\"}}/></Img>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  border-radius: 8px;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n        <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n          {/* </Heading> */}\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 8px;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'IBGFinance'\n          }}\n          options={{\n            height: '300',\n            chrome: \"noheader, nofooter\",\n            width: \"400\"\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/egg/man.png'); \n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  ${({ theme }) => theme.mediaQueries.sm}{\n  padding-top: 116px;\n  }\n  padding-top: 30px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/egg/man.png'), url('/images/egg/red.png');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero> \n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"primary1\" >  {/* color=\"secondary\" */}\n          {TranslateString(576, 'iBG Finance')}\n        </Heading>\n        <Text color=\"primary1\">\n          {/* {TranslateString(578, 'Top 3 best DEFI app on Binance Smart Chain.')} */}\n          </Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard/>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}