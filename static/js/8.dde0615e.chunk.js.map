{"version":3,"sources":["components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","hooks/useStake.ts","config/index.ts","components/layout/Flex.tsx","hooks/useApprove.ts","hooks/useUnstake.ts","views/Withdraw/components/FarmCard/CardHeading.tsx","views/Withdraw/components/DepositModal.tsx","views/Withdraw/components/WithdrawModal.tsx","views/Withdraw/components/FarmCard/StakeAction.tsx","views/Withdraw/components/FarmCard/CardActionsContainer.tsx","views/Withdraw/components/FarmCard/FarmCard.tsx","views/Withdraw/Farms.tsx"],"names":["StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","TranslateString","useI18n","toLocaleString","onClick","BigNumber","times","toString","useStake","pid","dispatch","useDispatch","account","useWallet","masterChefContract","useMasterchef","onStake","useCallback","amount","a","stake","txHash","fetchFarmUserDataAsync","console","info","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","useApprove","lpContract","onApprove","approve","tx","useEmergencyWithdraw","onEmergency","onWithdraw","useUnstake","onUnstake","unstake","Wrapper","Flex","CardHeading","Tag","lpLabel","farmImage","multiplier","risk","isToken","tokenSymbol","depositFee","toLowerCase","justifyContent","alignItems","mb","src","alt","style","width","height","flexDirection","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","variant","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","mr","color","Action","CardActions","farm","ethereum","setRequestedApproval","useFarmFromPid","lpAddresses","tokenAddresses","isTokenOnly","useFarmUser","allowance","lpAddress","earnings","process","tokenAddress","lpName","lpSymbol","toUpperCase","isGreaterThan","getContract","error","bold","textTransform","fontSize","pr","UnlockButton","mt","fullWidth","RainbowLight","keyframes","StyledCardAccent","FCard","card","background","FarmCard","borderColor","expanded","cakePrice","removed","bnbPrice","totalValue","lpTotalInQuoteToken","quoteTokenSymbol","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","apy","toNumber","minimumFractionDigits","quoteTokenAdresses","CardActionsContainer","Head","mediaQueries","sm","Head1","textSubtle","Head2","Img","Img1","Farms","farmsProps","path","useRouteMatch","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","inactiveFarms","filter","farmsList","userData","farmsToDisplay","cakeRewardPerYear","eggPerBlock","poolWeight","pow","comparedTo","Page","display","paddingLeft","paddingTop","marginTop","exact"],"mappings":"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","file":"static/js/8.dde0615e.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake,onWithdraw } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\n\n\nexport const useEmergencyWithdraw = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async () => {\n      const txHash = await onWithdraw(masterChefContract, pid, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onEmergency: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n  \n}) => {\n\n  let isToken = false;\n  if(lpLabel.toLowerCase() === \"ibg\" || lpLabel.toLowerCase() === \"busd\" ||\n   lpLabel.toLowerCase() ===\"wbnb\"){\n     isToken = true;\n   }\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <img src={`/images/egg/${farmImage}.png`} alt=\"iBG\" style={{width:\"5.5rem\",height:isToken?\"5.5rem\":\"3rem\"}} /> { /* {tokenSymbol} */ }\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel} </Heading>   \n        <Flex justifyContent=\"center\">\n        {/* <MultiplierTag >{multiplier}</MultiplierTag>\n          {depositFee === 0 ? <NoFeeTag /> : null} */}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake,{useEmergencyWithdraw}  from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const  {onEmergency} = useEmergencyWithdraw(pid);\n  \n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={()=>{\n        onEmergency()\n      }}>Withdraw</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      {/* <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading> */}\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return       <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\n\n  }\n\n  return (\n    <Action>\n      {/* <Flex>\n        <Text bold  color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n           iBG  \n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex> */}\n      {/* <HarvestAction earnings={earnings} pid={pid} /> */}\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n  rgba(255, 0, 0, 1) 0%,\n  rgba(255, 154, 0, 1) 10%,\n  rgba(208, 222, 33, 1) 20%,\n  rgba(79, 220, 74, 1) 30%,\n  rgba(63, 218, 216, 1) 40%,\n  rgba(47, 201, 226, 1) 50%,\n  rgba(28, 127, 238, 1) 60%,\n  rgba(95, 21, 242, 1) 70%,\n  rgba(186, 12, 248, 1) 80%,\n  rgba(251, 7, 217, 1) 90%,\n  rgba(255, 0, 0, 1) 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n // border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 8px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.lpSymbol.toLowerCase()}`\n\n  // console.log(`${farm.lpSymbol.toLowerCase()}`)\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'iBG'    // 'EGG'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'iBG' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n     \n      {/* <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel} </Text>  \n      </Flex> */}\n      {/* <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex> */}\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      {/* <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      /> */}\n      {/* <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly ?\n              `https://bscscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`   \n              :\n              `https://bscscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}` \n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    \n     */}\n    \n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport styled, { useTheme } from 'styled-components'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Head = styled.div`\n${({ theme }) => theme.mediaQueries.sm}{\n  display: flex;\n  width: 100%;\n  justify-content: space-around;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  align-items: center;\n  flex-direction: row;\n  border-radius: 8px;\n}\n  background: ${({ theme }) => theme.colors.background};\n  flex-direction: column;\n  border-radius: 8px;\n  height: 15rem;\n`\nconst Head1 = styled.div`\n${({ theme }) => theme.mediaQueries.sm}{\ncolor: ${({ theme }) => theme.colors.textSubtle};\nfont-size: 1.5rem;\nfont-weight: 700;\nmargin-top: 0;\n}\ncolor: ${({ theme }) => theme.colors.textSubtle};\nfont-size: 1.5rem;\nfont-weight: 700;\nmargin-top: 1.5rem;\ntext-align: center;\n`\n\nconst Head2 = styled.div`\ncolor: ${({ theme }) => theme.colors.textSubtle};\ntext-align: center;`\n\nconst Img = styled.div`\n${({ theme }) => theme.mediaQueries.sm}{\n  display: block;\n}\ndisplay:none;`;\n\nconst Img1 = styled.div`{\n  ${({ theme }) => theme.mediaQueries.sm}{\n    display: block;\n  }\n   display:none;\n}`\n\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  \n  const inactiveFarms = farmsLP.filter((farm) =>  farm.multiplier === '0X')\n\n  const stakedOnlyFarms = farmsLP.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1).times(new BigNumber(farm.poolWeight)).div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Head>\n      <div style={{display:\"flex\",alignItems:\"center\"}}>\n        <Img><img src=\"/images/IBG.png\" alt=\"logo\" style={{width:\"5rem\"}}/></Img>\n      <div style={{paddingLeft:\"1rem\"}}>\n      <Head1 >\n      \n      Withdraw your LPs / Tokens from V1\n\n      </Head1>\n      <Head2>\n        {/* {TranslateString(10000, 'Deposit Fee will be used to buyback EGG')} */}\n      </Head2>\n      </div>\n      </div>\n      <div style={{paddingTop:\"2rem\"}}>\n      {/* <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly}/> */}\n      </div>\n      </Head>\n      <div>\n        {/* <Divider /> */}\n        <FlexLayout style={{marginTop:\"3rem\"}}>\n          <Route exact path={`${path}`}>\n           {/* {farmsList(stakedOnlyFarms, true) } */}\n\n           {farmsList(inactiveFarms, true)}\n\n          </Route>\n          {/* <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route> */}\n        </FlexLayout>\n      </div>\n      <div style={{display:\"flex\",justifyContent:\"space-between\"}}>\n      <img src=\"/images/left.png\" alt=\"illustration\" style={{width:\"25rem\"}} />\n      <Img1><img src=\"/images/right.png\" alt=\"illustration\" style={{width:\"20rem\"}} /></Img1>\n      </div>\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}